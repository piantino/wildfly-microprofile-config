<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.wildfly.quickstarts</groupId>
	<artifactId>microprofile-config</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>microprofile-config Maven Webapp</name>
	<!-- FIXME change it to the project's website -->
	<url>http://www.example.com</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<wildfly.version>33.0.1.Final</wildfly.version>
		<wildfly.plugin.version>5.0.1.Final</wildfly.plugin.version>

		<app.conf.prop>MyPropertyFileConfigValue-LOCAL_DEV</app.conf.prop>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>wildfly-ee-with-tools</artifactId>
				<version>${wildfly.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- importing the microprofile BOM adds MicroProfile specs -->
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>wildfly-microprofile</artifactId>
				<version>${wildfly.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Import the MicroProfile Config API, we use provided scope as the
		API is included in the server -->
		<dependency>
			<groupId>org.eclipse.microprofile.config</groupId>
			<artifactId>microprofile-config-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Import the CDI API, we use provided scope as the API is included in
		the server -->
		<dependency>
			<groupId>jakarta.enterprise</groupId>
			<artifactId>jakarta.enterprise.cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Import the Jakarta REST API, we use provided scope as the API is
		included in the server -->
		<dependency>
			<groupId>jakarta.ws.rs</groupId>
			<artifactId>jakarta.ws.rs-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- JPA data base -->
		<dependency>
			<groupId>jakarta.persistence</groupId>
			<artifactId>jakarta.persistence-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>jakarta.transaction</groupId>
			<artifactId>jakarta.transaction-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Ativar openapi e swagger-ui -->
		<dependency>
			<groupId>org.eclipse.microprofile.openapi</groupId>
			<artifactId>microprofile-openapi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.microprofile-ext.openapi-ext</groupId>
			<artifactId>openapi-ui</artifactId>
			<version>2.0.0</version>
			<scope>runtime</scope>
		</dependency>

		<!-- EJB -->
		<dependency>
			<groupId>jakarta.ejb</groupId>
			<artifactId>jakarta.ejb-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Utilitários -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.34</version>
			<scope>provided</scope>
		</dependency>

		<!-- Testes -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- Set the name of the archive -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Allows to use mvn clean wildfly:dev -->
			<!-- https://docs.wildfly.org/wildfly-maven-plugin/releases/5.0/package-mojo.html -->
			<plugin>
				<groupId>org.wildfly.plugins</groupId>
				<artifactId>wildfly-maven-plugin</artifactId>
				<version>${wildfly.plugin.version}</version>
				<configuration>
					<!-- Usar glow para configurar o wilfly -->
					<discover-provisioning-info>
						<!-- Versão do servidor wildfly a ser provisionado -->
						<version>${wildfly.version}</version>
						<context>cloud</context>
						<!-- Ativa sugestões do glow-->
						<suggest>true</suggest>
						<add-ons>
							<add-on>postgresql</add-on>
						</add-ons>
						<verbose>true</verbose>
					</discover-provisioning-info>
					<!-- Variáveis para execução local apenas-->
					<!-- https://docs.wildfly.org/wildfly-maven-plugin/releases/4.2/dev-mojo.html#env -->
					<env>
						<POSTGRESQL_USER>db_user</POSTGRESQL_USER>
						<POSTGRESQL_PASSWORD>db_pass</POSTGRESQL_PASSWORD>
						<POSTGRESQL_SERVICE_HOST>localhost</POSTGRESQL_SERVICE_HOST>
						<POSTGRESQL_SERVICE_PORT>5432</POSTGRESQL_SERVICE_PORT>
						<POSTGRESQL_DATABASE>db_sample</POSTGRESQL_DATABASE>
						<CONFIG_PROP>${app.conf.prop}</CONFIG_PROP>
					</env>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>package</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement><!-- lock down plugins versions to avoid using Maven
			defaults (may be moved to parent pom) -->
			<plugins>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<!-- see
				http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.22.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>3.2.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<!-- Uso manual do galleon, sem usar o glow -->
			<id>dev-galleon</id>
			<build>
				<plugins>
					<!-- Allows to use mvn clean wildfly:dev -P dev-galleon -->
					<plugin>
						<groupId>org.wildfly.plugins</groupId>
						<artifactId>wildfly-maven-plugin</artifactId>
						<version>${wildfly.plugin.version}</version>
						<configuration>
							<feature-packs>
								<feature-pack>
									<location>wildfly@maven(org.jboss.universe:community-universe)</location>
								</feature-pack>
								<feature-pack>
									<location>org.wildfly:wildfly-galleon-pack:33.0.2.Final</location>
								</feature-pack>
								<feature-pack>
									<!--
									https://github.com/wildfly-extras/wildfly-datasources-galleon-pack -->
									<location>
										org.wildfly:wildfly-datasources-galleon-pack:8.0.1.Final</location>
								</feature-pack>
							</feature-packs>
							<layers>
								<!--
								https://docs.wildfly.org/33/Galleon_Guide.html#wildfly_foundational_galleon_layers -->
								<layer>jaxrs-server</layer>
								<layer>postgresql-datasource</layer>
								<layer>microprofile-openapi</layer>
							</layers>
							<env>
								<POSTGRESQL_USER>db_user</POSTGRESQL_USER>
								<POSTGRESQL_PASSWORD>db_pass</POSTGRESQL_PASSWORD>
								<POSTGRESQL_SERVICE_HOST>localhost</POSTGRESQL_SERVICE_HOST>
								<POSTGRESQL_SERVICE_PORT>5432</POSTGRESQL_SERVICE_PORT>
								<POSTGRESQL_DATABASE>db_sample</POSTGRESQL_DATABASE>
							</env>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>package</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>